import json
import boto3
import os

ec2 = boto3.client('ec2')
sns = boto3.client('sns')

SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
ISOLATE_SG_ID = os.environ.get('ISOLATE_SG_ID')

# Define the GuardDuty finding types you want to remediate
REMIDATION_FINDING_TYPES = [
    "Recon:EC2/Portscan",            # Portscan detection
    "DoS:EC2/DDoS",                  # Denial of Service detection
    "UnauthorizedAccess:EC2/SSHBruteForce",  # Example Unauthorized Access type
    # Add other relevant finding types as needed
]

def lambda_handler(event, context):
    print("Received event:", json.dumps(event))

    finding = event.get('detail')
    if not finding:
        print("No 'detail' found in event.")
        return

    finding_type = finding.get('type')
    if finding_type not in REMIDATION_FINDING_TYPES:
        print(f"Finding type {finding_type} not in the scope for remediation.")
        return

    resources = finding.get('resource', {})
    instance_id = resources.get('instanceDetails', {}).get('instanceId')
    if not instance_id:
        print("No EC2 instance ID found in event.")
        return

    try:
        # Describe instance
        response = ec2.describe_instances(InstanceIds=[instance_id])
        reservations = response.get('Reservations', [])
        if not reservations:
            print(f"Instance {instance_id} not found.")
            return
        instance = reservations[0]['Instances'][0]
        current_sgs = [sg['GroupId'] for sg in instance.get('SecurityGroups', [])]
        print(f"Current Security Groups: {current_sgs}")

        if not ISOLATE_SG_ID:
            print("ISOLATE_SG_ID environment variable not set.")
            return
        
        # Replace all security groups with the isolate security group
        ec2.modify_instance_attribute(InstanceId=instance_id, Groups=[ISOLATE_SG_ID])
        print(f"Instance {instance_id} security group replaced with isolate SG: {ISOLATE_SG_ID}")

        # Tag instance as compromised for tracking
        ec2.create_tags(Resources=[instance_id], Tags=[{'Key': 'Compromised', 'Value': 'True'}])
        print(f"Tagged instance {instance_id} as Compromised.")

        if not SNS_TOPIC_ARN:
            print("SNS_TOPIC_ARN not set.")
            return

        message = (
            f"Instance {instance_id} has been isolated due to GuardDuty finding {finding.get('id')} of type {finding_type}.\n"
            f"Original Security Groups: {current_sgs}\n"
            f"Finding Details: {json.dumps(finding)}"
        )
        sns.publish(TopicArn=SNS_TOPIC_ARN, Message=message, Subject="GuardDuty Alert: Instance Isolated")
        print(f"SNS notification sent for instance {instance_id}.")

    except Exception as e:
        print(f"Exception in Lambda: {e}")
        return

    return {
        'statusCode': 200,
        'body': json.dumps('Instance isolated and alert sent.')
    }
